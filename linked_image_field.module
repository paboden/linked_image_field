<?php

/**
 * @file
 * Defines a link image field type.
 */

/**
 * Implements hook_field_info().
 */
function linked_image_field_field_info() {
  //drupal_add_css(drupal_get_path('module', 'linked_image_field') . '/css/linked-image-field.css');
  return array(
    'linked_image_field' => array(
      'label' => t('Linked Image'),
      'description' => t('An edit widget for image files that display as a link, including a preview of the image.'),
      'settings' => array(
        'uri_scheme' => variable_get('file_default_scheme', 'public'),
        'default_image' => 0,
      ),
      'instance_settings' => array(
        'file_extensions' => 'png gif jpg jpeg',
        'file_directory' => '',
        'max_filesize' => '',
        'alt_field' => 0,
        'longdesc_field' => 0,
        'title_field' => 0,
        'rel_field' => 0,
        'class_field' => 0,
        'max_resolution' => '',
        'min_resolution' => '',
        'url' => '',
        'custom_target' => 0,
        'target' => '_self',
        'default_image' => 0,
        'options' => array(),
      ),
      'default_widget' => 'linked_image_field_widget',
      'default_formatter' => 'linked_image_field',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function linked_image_field_field_settings_form($field, $instance) {
  return image_field_settings_form($field, $instance);
}

/**
 * Implements hook_field_instance_settings_form().
 */
function linked_image_field_field_instance_settings_form($field, $instance) {
  // Use the image field instance settings form as a basis.
  $form = image_field_instance_settings_form($field, $instance);

  $settings = (isset($instance['settings']['url_settings']) ? $instance['settings']['url_settings'] : $instance['settings']);

  $form['url_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('URL Link settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => 0,
  );

  $form['url_settings']['url'] = array(
    '#type' => 'textfield',
    '#title' => t('Default URL'),
    '#description' => t('Provide a well-formed URL.  This will be the default url linked to by provided images.'),
    '#default_value' => $settings['url'],
    '#maxlength' => '255',
  );


  $form['url_settings']['rel_field'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable link <em>rel</em> field'),
    '#default_value' => $settings['rel_field'],
    '#description' => t('Allow rel attributes to be added to links'),
  );

  $form['url_settings']['class_field'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable link <em>class</em> field'),
    '#default_value' => $settings['class_field'],
    '#description' => t('Allow classes to be added to links'),
  );

  $target_options = _linked_image_field_widget_url_target_options();

  $form['url_settings']['custom_target'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable custom target'),
    '#default_value' =>  $settings['custom_target'],
    '#description' => t('Enable user to provide alternate target frame for link.'),
  );

  $form['url_settings']['target'] = array(
    '#type' => 'select',
    '#title' => t('Default Target'),
    '#description' => t('Select a default target type.'),
    '#default_value' => !empty($settings['target']) ? $settings['target'] : '_self',
    '#options' => $target_options,
    '#maxlength' => '255',
  );

  $form['longdesc_field'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable <em>Longdesc</em> field'),
    '#default_value' => $instance['settings']['longdesc_field'],
    '#description' => t('Allow the longdesc attribute to be added to images'),
    '#weight' => 10,
  );
  return $form;
}

/**
 * Implements hook_field_load().
 */
function linked_image_field_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  file_field_load($entity_type, $entities, $field, $instances, $langcode, $items, $age);
}

/**
 * Implements hook_field_prepare_view().
 */
function linked_image_field_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  return image_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items);
}

/**
 * Implements hook_field_presave().
 */
function linked_image_field_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_presave($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_insert().
 */
function linked_image_field_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_insert($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_update().
 */
function linked_image_field_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_update($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_delete().
 */
function linked_image_field_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_delete($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_delete_revision().
 */
function linked_image_field_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {
  file_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_is_empty().
 */
function linked_image_field_field_is_empty($item, $field) {
  return file_field_is_empty($item, $field);
}

/**
 * Implements hook_field_widget_info().
 */
function linked_image_field_field_widget_info() {
  return array(
    'linked_image_field_widget' => array(
      'label' => t('Linked Image'),
      'field types' => array('linked_image_field'),
      'settings' => array(
        'progress_indicator' => 'throbber',
        'preview_image_style' => 'thumbnail',
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function linked_image_field_field_widget_settings_form($field, $instance) {
  return image_field_widget_settings_form($field, $instance);
}

/**
 * Implements hook_field_widget_form().
 */
function linked_image_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  drupal_add_css(drupal_get_path('module', 'linked_image_field') . '/css/linked-image-field.css');
  $elements = image_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
  foreach (element_children($elements) as $delta) {
    $elements[$delta]['#process'][] = 'linked_image_field_widget_process';
  }
  return $elements;
}

/**
 * Element #process callback function.
 *
 * @param array $element
 * @param array $edit
 * @param arrayreference $form_state
 * @param array $form
 * @return array
 */
function linked_image_field_widget_process($element, &$form_state, $form) {
  $item = $element['#value'];
  $item['fid'] = $element['fid']['#value'];

  $instance = field_widget_instance($element, $form_state);

  $settings = $instance['settings'];
  $widget_settings = $instance['widget']['settings'];

  $element['url'] = array(
    '#title' => t('Link URL'),
    '#type' => 'textfield',
    '#default_value' => isset($item['url']) ? $item['url'] : $settings['url_settings']['url'],
    '#description' => t('This URL will be loaded when the image is clicked. For external addresses, the prefix "http(s)://" is required.'),
    '#weight' => -4,
    '#access' => (bool) $item['fid'],
  );
  $element['rel'] = array(
    '#title' => t('Link Rel'),
    '#type' => 'textfield',
    '#default_value' => isset($item['rel']) ? $item['rel'] : '',
    '#description' => t('Add rel attributes for bots, lightbox galleries, etc...'),
    '#maxlength' => variable_get('image_longdesc_length', 500),
    '#weight' => -4,
    '#access' => (bool) $item['fid'] && $settings['url_settings']['rel_field'],
  );
  $element['class'] = array(
    '#title' => t('Link Class'),
    '#type' => 'textfield',
    '#default_value' => isset($item['class']) ? $item['class'] : '',
    '#description' => t('Add classes for theming, colorboxes, etc...'),
    '#maxlength' => variable_get('image_longdesc_length', 500),
    '#weight' => -4,
    '#access' => (bool) $item['fid'] && $settings['url_settings']['class_field'],
  );
  $custom_target = $settings['url_settings']['custom_target'];
  $options = array('default' => t('Use Default') . ' (' . $settings['url_settings']['target'] . ')') + _linked_image_field_widget_url_target_options();
  $element['target'] = array(
    '#title' => t('Link Target'),
    '#type' => $custom_target ? 'select' : 'value',
    '#options' => $custom_target ? $options : NULL,
    '#default_value' => $custom_target && isset($item['target']) ? $item['target'] : $settings['url_settings']['target'],
    '#description'   => t('Window/Frame Target for the URL'),
    '#weight' => -4,
    '#access' => (bool) $item['fid'] && $custom_target,
  );
  $element['longdesc'] = array(
    '#title' => t('Image Longdesc'),
    '#type' => 'textfield',
    '#default_value' => isset($item['longdesc']) ? $item['longdesc'] : '',
    '#description' => t('The longdesc is used to provide a link to a long description of the image.'),
    '#maxlength' => variable_get('image_longdesc_length', 500),
    '#weight' => -1,
    '#access' => (bool) $item['fid'] && $settings['longdesc_field'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function linked_image_field_field_formatter_info() {
  $formatters = array(
    'linked_image_field' => array(
      'label' => t('Linked Image'),
      'field types' => array('linked_image_field'),
      'settings' => array(
        'image_style' => '',
        'image_link' => '',
      ),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function linked_image_field_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'linked_image_field') {
    //remove image link option from Linked image "Linked image (default)" formatter. We are already setting the link for this, silly :)
    $element = image_field_formatter_settings_form($field, $instance, $view_mode, $form, $form_state);
    unset($element['image_link']);
    unset($element['slideshow_link']);
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function linked_image_field_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }
  return image_field_formatter_settings_summary($field, $instance, $view_mode);

}

/**
 * Implements hook_field_formatter_view().
 */
function linked_image_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'linked_image_field':
      foreach ($items as $delta => $item) {
        // Set default values for empty elements.
        _linked_image_field_format_set_attribute('url', $item, $instance);
        _linked_image_field_format_set_attribute('alt', $item, $instance);
        _linked_image_field_format_set_attribute('title', $item, $instance);
        _linked_image_field_format_set_attribute('target', $item, $instance);

        $element[$delta] = array(
          '#theme' => 'linked_image_field_formatter',
          '#item' => $item,
          '#image_style' => $display['settings']['image_style'],
        );
      }
      break;
    }
  return $element;
}

/**
 * Implements hook_theme().
 */
function linked_image_field_theme() {
  return array(
    'linked_image_field_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'path' => NULL,
        'options' => NULL,
        'image_style' => NULL,
      ),
    ),
  );
}

/**
 * Returns HTML for an image field formatter.
 *
 * @param $variables
 *   An associative array containing:
 *   - item: An array of image data.
 *   - image_style: An optional image style.
 *   - path: An array containing the link 'path' and link 'options'.
 *
 * @ingroup themeable
 */
function theme_linked_image_field_formatter($variables) {
  $item = $variables['item'];

  $image = array(
    'path' => $item['uri'],
    'alt' => $item['alt'],
  );
  // Gets image height and width attributes.
  if (isset($item['width']) && isset($item['height'])) {
    $image['width'] = $item['width'];
    $image['height'] = $item['height'];
  }
  // Gets image 'longdesc' attribute.
  if (drupal_strlen($item['longdesc']) > 0) {
    $image['longdesc'] = $item['longdesc'];
  }
  // Gets anchor 'title' attribute.
  if (drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
  }
  // Gets anchor 'rel' attribute.
  if (drupal_strlen($item['rel']) > 0) {
    $image['rel'] = $item['rel'];
  }
  // Gets anchor 'class' attribute.
  if (drupal_strlen($item['class']) > 0) {
    $image['class'] = $item['class'];
  }

  if ($variables['image_style']) {
    $image['style_name'] = $variables['image_style'];
    $output = theme('image_style', $image);
  }
  else {
    $output = theme('image', $image);
  }

  // Themes attributes for the anchor tag
  if ($item['url']) {
    $options = array(
      'html' => TRUE,
      'attributes' => array(
        'title' => $item['title'],
        'target' => $item['target'],
        'rel' => $item['rel'],
        'class' => $item['class'],
      ),
    );
    $output = l($output, $item['url'], $options);
  }
  return $output;
}

/**
 * the list of URL frame targets
 *
 * @return array
 */
function _linked_image_field_widget_url_target_options() {
  return array(
    '_self' => t('Same Window (_self)'),
    '_blank' => t('New Window (_blank)'),
    '_parent' => t('Parent Frame (_parent)'),
    '_top' => t('Top Frame (_top)'),
  );
}

/**
 * Determine whether an attribute for the link should be the default or the custom.
 *
 * Works for a url, alt or title attribute.
 *
 * @param string $attr
 * @param array $item
 * @param array $instance
 */
function _linked_image_field_format_set_attribute($attr, &$item, $instance) {
  $default_value = (!empty($instance['settings'][$attr]) ? $instance['settings'][$attr] : !empty($instance['settings']['url_settings'][$attr]) ? $instance['settings']['url_settings'][$attr] : '');

  if (empty($item[$attr]) && !empty($default_value)) {
    $item[$attr] = $default_value;
  }
}


/**
 * Implements hook_field_formatter_info_alter().
 */
function linked_image_field_field_formatter_info_alter(&$info) {
  // Let a new field type re-use an existing formatter (let linked_image_field use the slideshow formatter).
  if (module_exists('field_slideshow')) {
    $info['slideshow']['field types'][] = 'linked_image_field';
  }
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 */
function linked_image_field_field_formatter_settings_form_alter(&$info) {
  // Add a setting to a formatter type. Adds option for Linked image URL to the Slideshow link settings.
  if (module_exists('field_slideshow')) {
    $info['slideshow_link']['#options']['linked_image_field'] = t('Linked image URL');
  }
}

function linked_image_field_field_attach_view_alter(&$output, $context) {
  drupal_add_css(drupal_get_path('module', 'linked_image_field') . '/css/linked-image-field.css');
  foreach (element_children($output) as $field_name) {
    $element = &$output[$field_name];
    if ($element['#field_type'] == 'linked_image_field' && $element['#formatter'] == 'slideshow') {
      foreach ($element['#items'] as $delta => $item) {
        if (!empty($output[$field_name][0]['#items'][$delta]['url'])) {
          $external_link = $output[$field_name][0]['#items'][$delta]['url'];
          $output[$field_name][0]['#items'][$delta]['path']['path'] = $external_link;
        }
      }
    }
  }
}

/**
 * Implements template_preprocess().
 */
function linked_image_field_preprocess_field_slideshow(&$variables) {
  // Add js variables
  $js_variables = $variables["js_variables"];

  drupal_add_js(array('field_slideshow' => array('field-slideshow-' . $variables['slideshow_id'] => $js_variables)), 'setting');

  // Add the JQuery plugins and the JS code
  if (module_exists('libraries')) {
    $path = libraries_get_path('jquery.cycle');
    if (file_exists($path . '/jquery.cycle.all.min.js')) drupal_add_js($path . '/jquery.cycle.all.min.js');
    elseif (file_exists($path . '/jquery.cycle.all.js')) drupal_add_js($path . '/jquery.cycle.all.js');

    if (isset($js_variables['pager']) && $js_variables['pager'] == 'carousel') {
      $path = libraries_get_path('jquery.jcarousel');
      if (file_exists($path . '/lib/jquery.jcarousel.min.js')) drupal_add_js($path . '/lib/jquery.jcarousel.min.js');
      elseif (file_exists($path . '/lib/jquery.jcarousel.js')) drupal_add_js($path . '/lib/jquery.jcarousel.js');
    }

    $path = libraries_get_path('jquery.imagesloaded');
    if (file_exists($path . '/jquery.imagesloaded.min.js')) drupal_add_js($path . '/jquery.imagesloaded.min.js');
    elseif (file_exists($path . '/jquery.imagesloaded.js')) drupal_add_js($path . '/jquery.imagesloaded.js');

    drupal_add_js(drupal_get_path('module', 'field_slideshow') . '/field_slideshow.js');
  }

  // Add css
  drupal_add_css(drupal_get_path('module', 'field_slideshow') . '/field_slideshow.css');

  // Generate classes
  $variables['classes_array'][] = 'field-slideshow-' . $variables['slideshow_id'];
  $variables['classes_array'][] = 'effect-' . $variables['js_variables']['fx'];
  $variables['classes_array'][] = 'timeout-' . $variables['js_variables']['timeout'];
  if (isset($variables['pager']) && $variables['pager'] != '') $variables['classes_array'][] = 'with-pager';
  if (isset($variables['controls'])) $variables['classes_array'][] = 'with-controls';

  // Change order if needed
  if (isset($variables['order'])) {
    if ($variables['order'] == 'reverse') $variables['items'] = array_reverse($variables['items']);
    elseif ($variables['order'] == 'random') shuffle($variables['items']);
  }

  // Generate slides
  $field_slideshow_zebra = 'odd';
  $variables['slides_max_width'] = 0;
  $variables['slides_max_height'] = 0;
  $slide_theme = (isset($variables['breakpoints']) && isset($variables['breakpoints']['mapping']) && !empty($variables['breakpoints']['mapping'])) ? 'picture' : 'image_style';
  foreach ($variables['items'] as $num => $item) {
    // Generate classes
    $classes = array('field-slideshow-slide', 'field-slideshow-slide-' . (1+$num));
    $field_slideshow_zebra = ($field_slideshow_zebra == 'odd') ? 'even' : 'odd';
    $classes[] = $field_slideshow_zebra;
    if ($num == 0) $classes[] = 'first';
    elseif ($num == count($variables['items']) - 1) $classes[] = 'last';
    $variables['items'][$num]['classes'] = implode(' ', $classes);

    // Generate the image html
    $image = array();
    $image['path'] = $item['uri'];
    $image['attributes']['class'] = array('field-slideshow-image', 'field-slideshow-image-' . (1+$num));
    $image['alt'] = isset($item['alt']) ? $item['alt'] : '';
    if (isset($item['width']) && isset($item['height'])) {
      $image['width'] = $item['width'];
      $image['height'] = $item['height'];
    }
    else {
      $image_dims = getimagesize($image['path']);
      $image['width'] = $image_dims[0];
      $image['height'] = $image_dims[1];
    }
    if (isset($item['title']) && drupal_strlen($item['title']) > 0) $image['title'] = $item['title'];
    if (isset($variables['image_style']) && $variables['image_style'] != '') {
      $image['style_name'] = $variables['image_style'];
      $image['breakpoints'] = $variables['breakpoints'];
      $variables['items'][$num]['image'] = theme($slide_theme, $image);
    }
    else {
      $variables['items'][$num]['image'] = theme('image', $image);
    }

    // Get image sizes and keeps the bigger ones, so height is correctly calculated by Cycle
    $dimensions = array(
      'width' => $image['width'],
      'height' => $image['height'],
    );
    if (isset($variables['image_style']) && $variables['image_style'] != '') {
      if (function_exists('image_style_transform_dimensions')) {
        image_style_transform_dimensions($image['style_name'], $dimensions);
      }
      // manual calculation if Drupal < 7.9 or image_style_transform_dimensions doesn't work
      if (!function_exists('image_style_transform_dimensions') || !is_numeric($dimensions['width'])) {
        $thumbnail_path = image_style_path($variables['image_style'], $image['path']);
        // if thumbnail is not generated, do it, so we can get the dimensions
        if (!file_exists($thumbnail_path)) {
          image_style_create_derivative(image_style_load($variables['image_style']), $image['path'], $thumbnail_path);
        }
        $thumbnail_dims = getimagesize($thumbnail_path);
        $dimensions = array(
          'width' => $thumbnail_dims[0],
          'height' => $thumbnail_dims[1],
        );
      }
    }

  // If the theme function hasn't added width and height attributes to the image, add them
  if (strpos($variables['items'][$num]['image'], 'width=') === FALSE) {
    $variables['items'][$num]['image'] = drupal_substr($variables['items'][$num]['image'], 0, -2) . "width=\"$dimensions[width]\" height=\"$dimensions[height]\" />";
  }

  // Keeps biggest dimensions
  if ($dimensions['width'] > $variables['slides_max_width']) $variables['slides_max_width'] = $dimensions['width'];
  if ($dimensions['height'] > $variables['slides_max_height']) $variables['slides_max_height'] = $dimensions['height'];

    // Add links if needed
    $links = array('path' => 'image');
    if (isset($item['caption']) && $item['caption'] != '') $links['caption_path'] = 'caption';
    // Loop thru required links (because image and caption can have different links)
    foreach ($links as $link => $out) {
      if (!empty($item[$link])) {
        $path = isset($item[$link]['path']) ? $item[$link]['path'] : NULL ;
        $options = isset($item[$link]['options']) ? $item[$link]['options'] : NULL;
        // When displaying an image inside a link, the html option must be TRUE.
        $options['html'] = TRUE;
        // Generate differnet rel attribute for image and caption, so colorbox doesn't double the image list
        if (isset($options['attributes']['rel'])) $options['attributes']['rel'] .= $out;
        $options = array_merge($options, drupal_parse_url($path));
        $variables['items'][$num][$out] = l($variables['items'][$num][$out], $options['path'], $options);
      }
    }
  }

  // Don't add controls if there's only one image
  if (count($variables['items']) == 1) {
    $variables['controls'] = '';
    $variables['pager'] = '';
  }
}
